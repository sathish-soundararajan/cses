

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.PrintWriter;
import java.util.StringTokenizer;
import java.util.*;

public class StaticRangeMinimumQueries {

    static class FastReader {
        BufferedReader br;
        StringTokenizer st;

        public FastReader(BufferedReader br){
            this.br = br;
        }

        public FastReader()
        {
            br = new BufferedReader(
                    new InputStreamReader(System.in));
        }

        String next()
        {
            while (st == null || !st.hasMoreElements()) {
                try {
                    st = new StringTokenizer(br.readLine());
                }
                catch (IOException e) {
                    e.printStackTrace();
                }
            }
            return st.nextToken();
        }

        int nextInt() { return Integer.parseInt(next()); }

        long nextLong() { return Long.parseLong(next()); }

        double nextDouble()
        {
            return Double.parseDouble(next());
        }

        String nextLine()
        {
            String str = "";
            try {
                str = br.readLine();
            }
            catch (IOException e) {
                e.printStackTrace();
            }
            return str;
        }
    }

    public static class SegmentTree{
        int[] tree;

        public SegmentTree(int[] arr){
            int n = arr.length;
            tree = new int[4 * n + 1];
            buildTree(1, 0, n - 1, arr);
        }

        public void buildTree(int v, int tl, int tr, int[] arr){
            if(tl == tr){
                tree[v] = arr[tl];
                return;
            }else{
                int mid = tl + ((tr -tl) / 2);
                buildTree(v * 2, tl, mid, arr);
                buildTree(2 * v + 1, mid + 1, tr, arr);
                tree[v] = Math.min(tree[v * 2], tree[v * 2 + 1]);
            }
        }

        public void print(){
            System.out.println(Arrays.toString(tree));
        }

        public int getQuery(int l, int r, int tl, int tr, int v){
            if(l == tl && r == tr){
                return tree[v];
            }

            if(tl >= tr || tr < l || tl > r) return Integer.MAX_VALUE;

            int mid = tl + ((tr - tl) / 2);
            return Math.min(getQuery(l, Math.min(mid, r), tl, mid, v * 2), getQuery(Math.max(mid + 1, l), r, mid + 1, tr, v * 2 + 1));
        }

    }

    public static void main(String[] args){

        FastReader fr = new FastReader();
        PrintWriter pw = new PrintWriter(System.out);

        int n = fr.nextInt();
        int q = fr.nextInt();

        int[] arr = new int[n];
        for(int i = 0; i < n; i++){
            arr[i] = fr.nextInt();
        }

        SegmentTree st = new SegmentTree(arr);

        // st.print();
        for(int i = 0; i < q; i++){
            int l = fr.nextInt();
            int r = fr.nextInt();

            int ans = st.getQuery(l - 1, r - 1, 0, n - 1, 1);

            pw.println(ans);
        }
        pw.close();
    }
}
